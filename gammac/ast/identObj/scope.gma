import "types/types.gma"
import "token/token.gma"

IDENT_BAD           :: 0
IDENT_CONST         :: 1
IDENT_FUNC          :: 2
IDENT_STRUCT        :: 3
IDENT_LOCAL_VAR     :: 4
IDENT_GLOBAL_VAR    :: 5

struct IdentObj {
    Kind u8,
    Idx u64
}

DEFAULT_IDENT_OBJ_POOL_SIZE :: 80

struct Scope {
    identObjNames [$]str,
    identObjs [$]IdentObj,
    // TODO recursive structs (u64 -> *Scope)
    parent u64,
    innersize u32,
    framesize u32
}

curFunc *Func := 0x0 as *Func
curScope *Scope := 0x0 as *Scope

fn GetFramesize() -> u32 {
    ret curScope.framesize + curScope.innersize
}

fn InGlobalScope() -> bool {
    ret curScope.parent == 0x0
}

fn InitGlobalScope() {
    curScope = malloc(1024) as *Scope
    *curScope = Scope{ 
        [$]str{DEFAULT_IDENT_OBJ_POOL_SIZE},
        [$]IdentObj{DEFAULT_IDENT_OBJ_POOL_SIZE},
        0x0, 0, 0
    }
}

fn StartScope() {
                    // TODO sizeof Scope
    curScope = malloc(1024) as *Scope
    *curScope = Scope{ 
        [$]str{DEFAULT_IDENT_OBJ_POOL_SIZE},
        [$]IdentObj{DEFAULT_IDENT_OBJ_POOL_SIZE},
        curScope as u64,
        0,
        curScope.framesize
    }
}

fn EndScope() {
    if InGlobalScope() == false {
        size := GetFramesize()
        parent := curScope.parent as *Scope
        if parent.innersize < size {
            parent.innersize = size
        }

        curScope = parent

        if InGlobalScope() {
            curScope.framesize = 0
        }
    }
}

fn GetIdentObj(name str) -> IdentObj {
    scope := curScope

    while scope != (0x0 as *Scope) {
        for i u64, scope.identObjNames.len {
            if scope.identObjNames[i] == name {
                ret scope.identObjs[i]
            }
        }

        scope = scope.parent as *Scope
    }

    ret IdentObj{ IDENT_BAD, 0 }
}

fn nameTaken(name str) -> bool {
    for i u64, curScope.identObjNames.len {
        if curScope.identObjNames[i] == name {
            ret true
        }
    }

    ret false
}

fn checkName(name Token) {
    if *(name.Str as *char) == '_' {
        print("[ERROR] names starting with \"_\" are reserved for the compiler\n")
        PrintPos(name.Pos)
        exit(1)
    }

    if nameTaken(name.Str) {
        print("[ERROR] name \"") print(name.Str) print("\" is already taken in this scope\n")
        PrintPos(name.Pos)
        exit(1)
    }
}

fn AddIdentObj(name Token, obj IdentObj) {
    checkName(name)

    idx := curScope.identObjNames.len - 1

    curScope.identObjNames[idx] = name.Str
    curScope.identObjs[idx] = obj

    curScope.identObjNames.len = idx+2
    curScope.identObjs.len = idx+2
}


fn CreateVar(name Token, t Type) -> Var {
    if InGlobalScope() {
        v := CreateGlobalVar(name, t)
        // curScope add var
        ret v
    } else {
        v := CreateLocalVar(name, t, curScope.framesize, false, false)
        curScope.framesize = curScope.framesize + TypeSize(v.typ)
        // curScope add var
        ret v
    }
}

fn CreateArg(name Token, t Type) -> Var {
    v := CreateLocalVar(name, t, curScope.framesize, true, false)
    curScope.framesize = curScope.framesize + TypeSize(v.typ)
    // curScope add var
    ret v
}

fn CreateArgFromStack(name Token, t Type) -> Var {
    v := CreateLocalVar(name, t, curScope.framesize, true, true)
    // curScope add var
    ret v
}
