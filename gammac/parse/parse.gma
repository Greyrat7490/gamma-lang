import "import/import.gma"

struct Parser {
    tokens Tokens,
    imports Imports,
    typesPool TypesPool,
    isMainDefined bool,
    noMainArg bool
}

fn create_parser(path str) -> Parser {
    imports := InitImports()
    tokens := ImportMain(path, &imports)

    ret Parser{ tokens, imports, InitTypesPool(), false, false }
}

fn Parse(p *Parser) {
    printStr("[INFO] parsing ...\n")

    // declare buildin

    t := Peek(&p.tokens)
    while t.Type != EOF_Token {
        SetLastImport(&p.tokens)

        // append Decls (prsDecl)

        t = Next(&p.tokens)
        printStr(t.Str) printChar('\n')

        // t = Peek(&p.tokens)
    }

    if p.isMainDefined == false {
        printStr("[ERROR] no \"main\" function was defined\n")
        exit(1)
    }

    // ast set noMainArg

    // ret ast
}
