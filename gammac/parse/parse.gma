import "import/import.gma"
import "ast/ast.gma"
import "ast/decl.gma"
import "parse/decl.gma"
import "ast/identObj/scope.gma"

struct NodesPool {
    declPool DeclPool
    // exprPool ExprPool,
    // stmtPool StmtPool
}

struct Parser {
    tokens Tokens,
    imports Imports,
    typesPool TypesPool,
    nodesPool NodesPool,
    isMainDefined bool,
    noMainArg bool
}


fn create_parser(path str) -> Parser {
    imports := InitImports()
    tokens := ImportMain(path, &imports)
    pool := NodesPool{ CreateDeclPool() }

    ret Parser{ tokens, imports, CreateTypesPool(), pool, false, false }
}

fn Parse(p *Parser) {
    print("[INFO] parsing ...\n")

    InitTypesPool(&p.typesPool)
    InitDeclPool(&p.nodesPool.declPool)
    InitGlobalScope()

    // declare buildin

    t := Cur(&p.tokens)
    while t.Type != EOF_Token {
        SetLastImport(&p.tokens)

        // append Decls (prsDecl)
        _ := prsDecl(&p.tokens)

        t = Peek(&p.tokens)
    }

    if p.isMainDefined == false {
        print("[ERROR] no \"main\" function was defined\n")
        exit(1)
    }

    // ast set noMainArg

    // ret ast
}
