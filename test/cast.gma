fn testSigned() {
    i i8 := 127
    print(" 127 as u8: ") print(utos(i as u8)) print(" (expected: 127)\n")

    i = -128
    print("-128 as u8: ") print(utos(i as u8)) print(" (expected: 128)\n")
}

fn testSizes() {
    i i64 := 128
    print("128 as i8: ") print(itos(i as i8)) print(" (expected: -128)\n")

    i2 i16 := 255
    print("255 as i8: ") print(itos(i2 as i8)) print(" (expected: -1)\n")
}

fn testPtr() {
    addr := 0xb8000
    vga_buf := addr as *u16     // u64 to ptr is unsafe but important for low-level programming

    nullptr := 0 as *u64

    i := 64
    ptr := &i
    print(utos(&i as u64)) print("\n")
    print(utos(ptr as u64)) print("\n")
}

fn testStr() {
    s := "test string"
    ptr := s as *char

    print(ctos(*ptr)) print("\n")
}

fn testArr() {
    arr := [3]i32{ -64, 69, 420 }
    ptr := arr as *i32

    print(itos(*ptr)) print("\n")
}

fn testChar() {
    i0 := 48
    print(itos(i0)) print("(int) -> '") print(ctos(i0 as char)) print("'\n")

    ia := 65
    print(itos(ia)) print("(int) -> '") print(ctos(ia as char)) print("'\n")
    print(itos(65)) print("(int) -> '") print(ctos(65 as char)) print("'\n")
    print(itos(ia + 25)) print("(int) -> '") print(ctos(ia + 25 as char)) print("'\n")
}

fn testBool() {
    b := true
    print(btos(b)) print("(bool) -> '") print(itos(b as i32)) print("'\n")

    b = false
    print(btos(b)) print("(bool) -> '") print(itos(b as i32)) print("'\n")
}

fn testExtend() {
    u := -(64 as i32) as u32             // 4294967232 / 0xffffffc0
    print(utos(u)) print(ctos('\n'))
    print(itos(u as i32)) print(ctos('\n'))
    print(itos(u as i64)) print(ctos('\n'))

    print(itos(u as i32 as i64)) print(ctos('\n'))   // expected result: 4294967232
    /*
     * go result: -64
     * size of u is 32bit a sign extention would be needed to set upper 32 bits
     * go seems to sign extend from signed 32bit to signed 64bit

     * gamma will not do that because casts are supposed to be as simple as possible and should
       not add extra instructions or change values in any way
    */
}

fn main() {
    print("test u8 / i8 ------\n")
    testSigned()

    print("\ntest sizes ------\n")
    testSizes()

    print("\ntest pointer ------\n")
    testPtr()

    print("\ntest string ------\n")
    testStr()

    print("\ntest array ------\n")
    testArr()

    print("\ntest char ------\n")
    testChar()

    print("\ntest bool ------\n")
    testBool()

    print("\ntest extend ------\n")
    testExtend()
}
