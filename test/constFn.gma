cfn test1() -> i32 {
    ret 30 + 34
}

cfn testIf() -> i32 {
    c :: 2

    if c == 1 {
        ret 30 + 34
    } elif c == 2 {
        ret -(30 + 34)
    } else {
        ret c
    }
}

cfn testSwitch() -> i32 {
    c :: 3

    if c == {
        1: ret 30 + 38 + c
        2: ret -(30 + 37 + c)
        _: ret c * c
    }
}

cfn testThrough() -> i32 {
    c :: 2

    if c == {
        1:
            ret 30 + 38 + c
        2:
            if c > 1 {
                through
            } else {
                ret 420
            }
        _:
            ret c * c
    }
}

cfn testVar() -> i32 {
    i := 1

    i = i + 2

    if i == 1 {
        ret 63 + i
    } else {
        ret -i
    }
}

cfn testArgs(i i32) -> i32 {
    if i == {
        0: ret i - 64
        1: ret i + 63
        2: ret 418 + i
        _: ret i
    }
}

cfn testDeref() -> bool {
    word i16 := 0x0001
    ptr *bool := &word as u64 as *bool
    ret *ptr == false
}

fn isBigEndian() -> bool {
    word i16 := 0x0001
    ptr *bool := &word as u64 as *bool
    ret *ptr == false
}

cfn testFor(a i32) -> i32 {
    res := 0
    for i i32, a {
        res = res + i
    }
    ret res
}

cfn testWhile(a i32) -> i32 {
    while a % 3 != 0 || a % 4 != 0 {
        a = a + 1
    }

    ret a
}

cfn testPtr() -> bool {
    word i16 := 0x0001
    ptr *bool := &word as u64 as *bool
    ptr2 := &ptr
    ret **ptr2 == false
}

cfn testArr() -> [3]i32 {
    res := [3]i32{}

    for i i32, 3 {
        res[i] = 1 + i * 2
    }

    ret res
}

cfn testArr2() -> [3]i32 {
    res := [3]i32{}
    ptr := &res

    for i i32, 3 {
        *ptr[i] = 1 + i * 2
    }

    ret res
}

struct Test {
    b bool,
    i i32
}

cfn testStruct(i i32) -> i32 {
    t := Test{ true, 0 }
    t.i = i
    ret t.i
}

cfn testDeref2(i i32) -> i32 {
    i2 := 0
    ptr := &i2
    *ptr = i
    ret i2
}

fn printArr(arr [3]i32) {
    print("{ ")

    print(itos(arr[0])) print(", ")
    print(itos(arr[1])) print(", ")
    print(itos(arr[2]))

    print(" }\n")
}

cfn fib(i u64) -> u64 {
    ret $ i == {
        0, 1: 1 as u64
           _: fib(i-1) + fib(i-2)
    }
}

fn main() {
    print("\ntest simple --------\n")
    print(itos(test1())) print(ctos('\n'))
    print(itos(testIf())) print(ctos('\n'))
    print(itos(testSwitch())) print(ctos('\n'))
    print(itos(testThrough())) print(ctos('\n'))
    print(itos(testVar())) print(ctos('\n'))

    print("\ntest args --------\n")
    print(itos(testArgs(0))) print(ctos('\n'))
    print(itos(testArgs(1))) print(ctos('\n'))
    print(itos(testArgs(2))) print(ctos('\n'))
    print(itos(testArgs(69))) print(ctos('\n'))

    print("\ntest deref --------\n")
    print(btos(testDeref())) print(ctos('\n'))
    print(btos(isBigEndian())) print(ctos('\n'))
    print(btos(testPtr())) print(ctos('\n'))

    print("\ntest loops --------\n")
    print(itos(testFor(6))) print(ctos('\n'))
    print(itos(testFor(3))) print(ctos('\n'))
    print(itos(testWhile(3))) print(ctos('\n'))
    print(itos(testWhile(13))) print(ctos('\n'))

    print("\ntest array --------\n")
    printArr(testArr())
    printArr(testArr2())

    print("\ntest struct --------\n")
    print(itos(testStruct(64))) print(ctos('\n'))
    print(itos(testStruct(-64))) print(ctos('\n'))

    print("\ntest assign deref --------\n")
    print(itos(testDeref2(-64))) print(ctos('\n'))

    print("\ntest recursive --------\n")
    print(utos(fib(0))) print(ctos('\n'))
    print(utos(fib(1))) print(ctos('\n'))
    print(utos(fib(2))) print(ctos('\n'))
    print(utos(fib(3))) print(ctos('\n'))
    print(utos(fib(4))) print(ctos('\n'))
    print(utos(fib(5))) print(ctos('\n'))

    print(ctos('\n'))
    for i u64, 6 {
        print(utos(fib(i))) print(ctos('\n'))
    }
}
