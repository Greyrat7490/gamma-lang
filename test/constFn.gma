cfn test1() -> i32 {
    ret 30 + 34
}

cfn testIf() -> i32 {
    c :: 2

    if c == 1 {
        ret 30 + 34
    } elif c == 2 {
        ret -(30 + 34)
    } else {
        ret c
    }
}

cfn testSwitch() -> i32 {
    c :: 3

    if c == {
        1: ret 30 + 38 + c
        2: ret -(30 + 37 + c)
        _: ret c * c
    }
}

cfn testThrough() -> i32 {
    c :: 2

    if c == {
        1:
            ret 30 + 38 + c
        2:
            if c > 1 {
                through
            } else {
                ret 420
            }
        _:
            ret c * c
    }
}

cfn testVar() -> i32 {
    i := 1

    i = i + 2

    if i == 1 {
        ret 63 + i
    } else {
        ret -i
    }
}

cfn testArgs(i i32) -> i32 {
    if i == {
        0: ret i - 64
        1: ret i + 63
        2: ret 418 + i
        _: ret i
    }
}

cfn testDeref() -> bool {
    word i16 := 0x0001
    ptr *bool := &word as u64 as *bool
    ret *ptr == false
}

fn isBigEndian() -> bool {
    word i16 := 0x0001
    ptr *bool := &word as u64 as *bool
    ret *ptr == false
}

fn main() {
    printStr("\ntest simple --------\n")
    printInt(test1()) printChar('\n')
    printInt(testIf()) printChar('\n')
    printInt(testSwitch()) printChar('\n')
    printInt(testThrough()) printChar('\n')
    printInt(testVar()) printChar('\n')

    printStr("\ntest args --------\n")
    printInt(testArgs(0)) printChar('\n')
    printInt(testArgs(1)) printChar('\n')
    printInt(testArgs(2)) printChar('\n')
    printInt(testArgs(69)) printChar('\n')

    printStr("\ntest deref --------\n")
    printBool(testDeref()) printChar('\n')
    printBool(isBigEndian()) printChar('\n')
}
