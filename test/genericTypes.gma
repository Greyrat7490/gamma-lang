enum Option<T> {
    Val(T), None
}

struct S<T> {
    u1 u64,
    u2 u32,
    t T
}

fn test_enum() {
    a := Option::<u64>.Val(69)
    b := Option::<u64>.None
    c := Option::<i8>.Val(-64)

    if a : Option::<u64>.Val(a) {
        println(fmt("a: {}", a))
    }

    if b : Option::<u64>.Val(a) {
        println(fmt("(dead code) a: {}", a))
    } else {
        println("b: None")
    }

    if c : Option::<i8>.Val(c) {
        println(fmt("c: {}", c))
    }
}

fn test_struct() {
    s1 := S::<u8>{ 0, 1, 2 }
    s2 := S::<u64>{ 3, 4, 5 }
    s3 := S::<str>{ 6, 7, "8 (str)" }

    println(fmt("S::<u8> s1.t: {}", s1.t))
    println(fmt("S::<u64> s2.t: {}", s2.t))
    println(fmt("S::<str> s3.t: {}", s3.t))
}

fn main() {
    println("enum: ")
    test_enum()

    println("\nstruct: ")
    test_struct()
}
