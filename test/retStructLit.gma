struct Test {
    i1 i64,
    b bool,
    i2 i64
}

struct Test2 {
    i1 i64,
    t Test,
    i2 i64
}


// 4 agrs -> rcx will be overwriten
fn retInt(i1 i32, i2 i32, i3 i32, i4 i32) -> i64 {
    ret i4
}

// returning a big struct -> rcx stores a addr to write to
fn createTest(i1 i32, i2 i32, i3 i32, i4 i32) -> Test {
    ret Test{
        i1: retInt(i1, i2, i3, i4),
        i2: retInt(i1, i2, i3, i4+1),
        b: true
    }
}


fn test() -> Test2 {
    ret Test2{
        i1: retInt(1,1,1,1),
        i2: retInt(1,1,1,2),
        t: Test{
            i1: retInt(1,1,1,3),
            i2: retInt(1,1,1,4),
            b: true
        }
    }
}

fn test2(i1 i32, i2 i32, i3 i32, i4 i32) -> Test2 {
    ret Test2{
        i1: retInt(i1, i2, i3, i4),
        i2: retInt(i1, i2, i3, i4+1),
        t: createTest(i1, i2, i3, i4+2)
    }
}


fn printTest2(t Test2) {
    print("t.i1: ") print(itos(t.i1)) print(ctos('\n'))
    print("t.i2: ") print(itos(t.i2)) print(ctos('\n'))
    print("t.t.i1: ") print(itos(t.t.i1)) print(ctos('\n'))
    print("t.t.i2: ") print(itos(t.t.i2)) print(ctos('\n'))
    print("t.t.b: ") print(btos(t.t.b)) print(ctos('\n'))
}

fn main() {
    t := test()
    printTest2(t)
    print("---\n")
    printTest2(test())

    print("--------\n")

    t2 := test2(1, 2, 3, 4)
    printTest2(t2)
    print("---\n")
    printTest2(test2(1, 2, 3, 4))
}
