import "string.gma"

interface TestInterface {
    fn show(self)
}

struct TestStruct<T> {
    a T
}

impl TestStruct<u64> :: TestInterface {
    fn show(self) {
        println(fmt("TestStruct<u64>: {}", self.a))
    }
}

impl TestStruct<i64> :: TestInterface {
    fn show(self) {
        println(fmt("TestStruct<i64>: {}", self.a))
    }
}

impl *char :: String {
    fn to_str(self) -> str {
        size := 0
        while size < 0xffffff as u32 {
            if *(self+(size as u64)) == '\0' {
                break
            }
            size = size+1
        }
        ret from_pchar(size, self)
    }
}

fn ptrTest() {
    s := "test string\0" as *char
    println(fmt("{}", s))
}

fn ptrTest2() {
    s := "test string2\0"
    println(*char.to_str(s as *char))
}

fn genericStructTest() {
    t := TestStruct::<u64>{ a: 64 }
    t.show()
}

fn genericStructTest2() {
    t := TestStruct::<i64>{ a: -64 }
    TestStruct::<i64>.show(t)
}

fn main() {
    println("generic struct test")
    genericStructTest()
    genericStructTest2()

    println("\nptr test")
    ptrTest()
    ptrTest2()
}
