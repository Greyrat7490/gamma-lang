// test ",", base cond
fn simple(a1 i32) {
    l1 i32 := $ a1 == {
        69, -69: 69
        -86, 86: 86
              _: 420
    }

    printInt(l1) printStr("\n")
}

// only default
fn onlyDefault(a1 i32) {
    printInt(${ _: a1 })
    printStr("\n")
}

fn arith(a1 i32) {
    l1 i32 := $ (a1 - 1) / 10 == {
        69, -69: 69
        -86, 86: 86
              _: (a1 - 1) / 10
    }

    printInt(l1) printStr("\n")
}

// test ";", no base cond, "<", inlining xswitch
fn printAbs(a1 i32) {
    printInt(${ a1 < 0: -a1;  _: a1 })
    printStr("\n")
}

// test inlined with string
fn stringTest(a1 i32) {
    printStr(${
        a1 > 0: "positiv\n"
        a1 < 0: "negativ\n"
        _: "neutral\n"
    })
}

// test define string
fn stringTest2(a1 i32) {
    s str := ${
        a1 > 0: "positiv\n"
        a1 < 0: "negativ\n"
        _: "neutral\n"
    }

    printStr(s)
}

// test inlined with bool
fn boolTest(a1 i32) {
    printInt(a1) printStr(" > 0: ")
    printBool(${
        a1 > 0: true
        _: false
    })
    printStr("\n")
}

// test define bool
fn boolTest2(a1 i32) {
    b bool := ${
        a1 > 0: true
        _: false
    }

    printInt(a1) printStr(" > 0: ")
    printBool(b) printStr("\n")
}

fn main() {
    printStr("simple -----------\n")
    simple(69)
    simple(86)
    simple(-69)
    simple(-86)
    simple(0)

    printStr("only default -----\n")
    onlyDefault(69)
    onlyDefault(-69)
    onlyDefault(86)
    onlyDefault(-86)
    onlyDefault(-420)

    printStr("arith ------------\n")
    arith(690)
    arith(-689)
    arith(861)
    arith(-861)
    arith(-420)

    printStr("printAbs ---------\n")
    printAbs(69)
    printAbs(-69)
    printAbs(86)
    printAbs(-86)
    printAbs(-420)

    printStr("string test (inlined) ---------\n")
    stringTest(69)
    stringTest(-69)
    stringTest(86)
    stringTest(-86)
    stringTest(-420)

    printStr("string test (def var) ---------\n")
    stringTest2(69)
    stringTest2(-69)
    stringTest2(86)
    stringTest2(-86)
    stringTest2(-420)

    printStr("bool test (inlined) ---------\n")
    boolTest(69)
    boolTest(-69)
    boolTest(86)
    boolTest(-86)
    boolTest(-420)

    printStr("bool test (def var) ---------\n")
    boolTest2(69)
    boolTest2(-69)
    boolTest2(86)
    boolTest2(-86)
    boolTest2(-420)
}
