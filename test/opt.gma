fn find<T>(arr [$]T, elem T) -> Opt<u64> {
    for i u64, arr.len {
        if arr[i] == elem {
            ret Opt::<u64>::Val(i)
        }
    }

    ret Opt::<u64>::None
}

fn useless<T>(arr [$]T, elem T) -> Opt<T> {
    for i u64, arr.len {
        if arr[i] == elem {
            ret Opt::<T>::Val(elem)
        }
    }

    ret Opt::<T>::None
}

fn printArr<T>(arr [$]T) {
    print("{ ")
    for i u64, arr.len {
        print(fmt("{} ", arr[i]))
    }
    println("}")
}

fn testU64() {
    arr := [$]u64{ cap: 5, len: 5 }
    arr[3] = 64

    printArr::<u64>(arr)

    res := find::<u64>(arr, 64)
    if res : Opt::<u64>::Val(res) {
        println(fmt("64 at idx: {}", res))
    } else {
        println("could not find 64 in arr")
    }

    res2 := find::<u64>(arr, 69)
    if res2 : Opt::<u64>::Val(res2) {
        println(fmt("69 at idx: {}", res2))
    } else {
        println("could not find 69 in arr")
    }

}

fn testChar() {
    arr := [$]char{ cap: 5, len: 5 }
    arr[2] = 'r'

    printArr::<char>(arr)

    res := find::<char>(arr, 'r')
    if res : Opt::<u64>::Val(res) {
        println(fmt("'r' at idx: {}", res))
    } else {
        println("could not find 'r' in arr")
    }

    res2 := find::<char>(arr, 'a')
    if res2 : Opt::<u64>::Val(res2) {
        println(fmt("'a' at idx: {}", res2))
    } else {
        println("could not find 'a' in arr")
    }
}

fn testGenericRet() {
    arr := [$]bool{ cap: 5, len: 5 }
    arr[4] = true

    printArr::<bool>(arr)

    res := useless::<bool>(arr, true)
    if res : Opt::<bool>::Val(res) {
        println(fmt("arr contains {}", res))
    } else {
        println("arr does not contains true")
    }
}

fn main() {
    println("u64 arr ------")
    testU64()
    println("\nchar arr ------")
    testChar()
    println("\nret generic enum ------")
    testGenericRet()
}
