import "memory.gma"

fn dummy<T>(a T) -> T {
    ret a
}

fn printArr<T>(arr [$]T) {
    print("{ ")

    for i u64, arr.len {
        print(fmt("{} ", arr[i]))
    }

    println("}")
}

fn append<T>(arr [$]T, elem T) -> [$]T {
    if arr.len >= arr.cap {
        new_cap := arr.cap * 2
        new_arr := [$]T{ len: arr.len, cap: new_cap }

        memcpy(new_arr as *T as u64, arr as *T as u64, arr.cap * sizeof::<T>())

        arr = new_arr
        println(fmt("cap: {}", arr.cap))
    }
    
    arr[arr.len] = elem
    arr.len = arr.len+1
    ret arr
}

fn testGenericVec(int_arr [$]i32, uint_arr [$]u32, bool_arr [$]bool) {
    printArr::<i32>(int_arr)
    printArr::<u32>(uint_arr)
    printArr::<bool>(bool_arr)
}

fn testAppend(int_arr [$]i32, uint_arr [$]u32, bool_arr [$]bool) {
    int_arr = append::<i32>(int_arr, -3)
    uint_arr = append::<u32>(uint_arr, 3)
    bool_arr = append::<bool>(bool_arr, true)

    testGenericVec(int_arr, uint_arr, bool_arr)
}

fn testJustRet() {
    println(itos(dummy::<i64>(69)))
    println(utos(dummy::<u8>(64 as u8)))
}

fn main() {
    int_arr := [$]i32{ len: 2 }
    uint_arr := [$]u32{ len: 2 }
    bool_arr := [$]bool{ len: 2 }

    println(fmt("len: {} cap: {}", int_arr.len, int_arr.cap))

    int_arr[0] = -1
    int_arr[1] = -2
    
    uint_arr[0] = 1
    uint_arr[1] = 2
    
    bool_arr[0] = false
    bool_arr[1] = true

    println("test just return ----------------")
    testJustRet()

    println("test vec with generic type ------")
    testGenericVec(int_arr, uint_arr, bool_arr)

    println("test vec append -----------------")
    testAppend(int_arr, uint_arr, bool_arr)

    for i i32, 1024 {
        int_arr = append::<i32>(int_arr, i)
    }

    println(fmt("len: {} cap: {}", int_arr.len, int_arr.cap))
}
