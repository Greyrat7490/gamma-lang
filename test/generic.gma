fn dummy<T>(a T) -> T {
    ret a
}

fn printArr<T>(arr [$]T) {
    print("{ ")

    for i u64, arr.len {
        print(fmt("{} ", arr[i]))
    }

    println("}")
}

fn append<T>(arr [$]T, elem T) -> [$]T {
    arr[arr.len] = elem
    arr.len = arr.len+1
    ret arr
}

fn main() {
    int_arr := [$]i32{ len: 2 }
    uint_arr := [$]u32{ len: 2 }
    bool_arr := [$]bool{ len: 2 }

    int_arr[0] = -1
    int_arr[1] = -2
    
    uint_arr[0] = 1
    uint_arr[1] = 2
    
    bool_arr[0] = false
    bool_arr[1] = true
    
    printArr::<i32>(int_arr)

    printArr::<u32>(uint_arr)
    printArr::<bool>(bool_arr)

    println(itos(dummy::<i64>(69)))
    println(utos(dummy::<u8>(64 as u8)))

    // int_arr = append::<i32>(int_arr, -3)
    // 
    // printArr::<i32>(int_arr)
}
