fn test1() {
    vec := [$]i32{ cap: 10, len: 1 }

    // vec[1024] no segfault because mmap maps a whole page (4KB -> 4 * 1024)
    // TODO restrict to actual cap
    for i i32, 10 {
        vec[i] = i+1
    }

    for i i32, 10 {
        print(itos(vec[i])) print(ctos(' '))
    }
    print(ctos('\n'))

    print("vec.len: ") print(utos(vec.len)) print(ctos('\n'))
    print("vec.cap: ") print(utos(vec.cap)) print(ctos('\n'))
}

fn test2() {
    vec2 := [$]i32{ 1 }
    print("vec2.len: ") print(utos(vec2.len)) print(ctos('\n'))
    print("vec2.cap: ") print(utos(vec2.cap)) print(ctos('\n'))

    print(itos(vec2[0])) print(" -> ")
    vec2[0] = 86
    print(itos(vec2[0])) print(ctos('\n'))
}

fn printVec(v [$]i32) {
    print("[ ")
    for i u64, v.cap {
        print(itos(v[i])) print(ctos(' '))
    }
    print("]\n")
}

fn setVec(v [$]i32, val i32) {
    for i u64, v.cap {
        v[i] = val
    }
}

fn test3() {
    vec := [$]i32{ 3 }
    printVec(vec)
    setVec(vec, -64)
    printVec(vec)
    setVec(vec, 86)
    printVec(vec)
}

fn retTest(arr [3]i32) -> [$]i32 {
    vec := [$]i32{ cap: arr.len, len: arr.len }

    for i u64, vec.len {
        vec[i] = arr[i]
    }

    ret vec
}

fn ptrTest() {
    vec := [$]i32{ 3 }
    printVec(vec)

    ptr := &vec

    for i u64, 3 {
        *ptr[i] = 64
    }

    printVec(*ptr)
}

fn xswitchTest(i u32) {
    vec := [$]i32{ 1 }
    vec2 := [$]i32{ 2 }

    $ i == { 0: vec; _: vec2 }[i] = 420

    printVec(vec)
    printVec(vec2)
}

fn testAppend() {
    vec := [$]i32{ 1 }

    println("vec: " + vtos::<i32>(vec))

    for i i32, 1024 {
        vec = append::<i32>(vec, -i)
    }

    println("vec: " + vtos::<i32>(vec))
}

fn main() {
    test1()

    println("----")

    test2()

    println("----")

    test3()

    println("----")

    vec := retTest([3]i32{ 0, 1, 2 })
    printVec(vec)

    println("----")

    ptrTest()

    println("----")

    xswitchTest(0)
    print("--\n")
    xswitchTest(1)

    println("----")

    testAppend()
}

/*
 * TODO
    vec.reserve()   // update cap
    vec.resize()    // update len

    vec ++ [2]i32{ 2, 3 }    // concat
*/
