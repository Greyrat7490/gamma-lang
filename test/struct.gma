struct Coord {
    x i32,
    y i32,
    z i32
}

struct BigStruct {
    a1 i32,
    a2 i32,
    a3 i32,
    a4 i32,
    a5 i32
}

struct Vec2 { x i32, y i32 }

struct Test {
    i1 i32,
    s1 str,
    i2 i32
}

struct Test2 {
    i i32,
    t Test,
    b bool
}

c1 Coord := Coord{ y: 69, x: 420, z: -64 }

fn test_global() {
    printStr("x: ") printInt(c1.x) printStr("\n")
    printStr("y: ") printInt(c1.y) printStr("\n")
    printStr("z: ") printInt(c1.z) printStr("\n")
}

fn test_local() {
    c2 := Coord{ z: 69, y: -420, x: 64 }

    printStr("x: ") printInt(c2.x) printStr("\n")
    printStr("y: ") printInt(c2.y) printStr("\n")
    printStr("z: ") printInt(c2.z) printStr("\n")
}

fn testNested() {
    t := Test{ i1: 64, s1: "test string", i2: -69 }

    printStr("i1: ")   printInt(t.i1)
    printStr("\ns1: ") printStr(t.s1)
    printStr("\ni2: ") printInt(t.i2)
    printStr("\n-----\n")

    t2 := Test2{ i: -64, t: Test{ i1: 64, s1: "test string", i2: -69 }, b: true }

    printStr("i: ")    printInt(t2.i)
    printStr("\ni1: ") printInt(t2.t.i1)
    printStr("\ns1: ") printStr(t2.t.s1)
    printStr("\ni2: ") printInt(t2.t.i2)
    printStr("\nb: ") printBool(t2.b)
    printStr("\n-----\nt2.t.s1 = \"new string\"\n")

    t2.t.s1 = "new string"

    printStr("i: ")    printInt(t2.i)
    printStr("\ni1: ") printInt(t2.t.i1)
    printStr("\ns1: ") printStr(t2.t.s1)
    printStr("\ni2: ") printInt(t2.t.i2)
    printStr("\nb: ") printBool(t2.b)
    printStr("\n")
}

fn assignField() {
    c2 := Coord{ x: 64, y: -420, z: 69 }

    printStr("c1:\n")
    printStr("x: ") printInt(c1.x) printStr("\n")
    printStr("y: ") printInt(c1.y) printStr("\n")
    printStr("z: ") printInt(c1.z) printStr("\n")

    printStr("c2:\n")
    printStr("x: ") printInt(c2.x) printStr("\n")
    printStr("y: ") printInt(c2.y) printStr("\n")
    printStr("z: ") printInt(c2.z) printStr("\n")

    printStr("-----\n")

    printStr("c1.y = -69\n")
    printStr("c2.y = -69\n")
    c1.y = -69
    c2.y = -69

    printStr("c1:\n")
    printStr("x: ") printInt(c1.x) printStr("\n")
    printStr("y: ") printInt(c1.y) printStr("\n")
    printStr("z: ") printInt(c1.z) printStr("\n")

    printStr("c2:\n")
    printStr("x: ") printInt(c2.x) printStr("\n")
    printStr("y: ") printInt(c2.y) printStr("\n")
    printStr("z: ") printInt(c2.z) printStr("\n")
}

fn assign() {
    c2 := Coord{ x: 64, y: -420, z: 69 }

    printStr("c1:\n")
    printStr("x: ") printInt(c1.x) printStr("\n")
    printStr("y: ") printInt(c1.y) printStr("\n")
    printStr("z: ") printInt(c1.z) printStr("\n")

    printStr("c2:\n")
    printStr("x: ") printInt(c2.x) printStr("\n")
    printStr("y: ") printInt(c2.y) printStr("\n")
    printStr("z: ") printInt(c2.z) printStr("\n")

    printStr("c2 = c1\n")
    c2 = c1

    printStr("c2:\n")
    printStr("x: ") printInt(c2.x) printStr("\n")
    printStr("y: ") printInt(c2.y) printStr("\n")
    printStr("z: ") printInt(c2.z) printStr("\n")
}

fn const() {
    c2 :: Coord{ x: 64, y: 69, z: -64 }

    printStr("c2:\n")
    printStr("x: ") printInt(c2.x) printStr("\n")
    printStr("y: ") printInt(c2.y) printStr("\n")
    printStr("z: ") printInt(c2.z) printStr("\n")

    printStr("2 * c2.x / 8 = ")
    printInt(2 * c2.x / 8) printStr("\n")
}

fn printCoord(c Coord) {
    printStr("x: ") printInt(c.x) printStr("\n")
    printStr("y: ") printInt(c.y) printStr("\n")
    printStr("z: ") printInt(c.z) printStr("\n")
}

fn offsetCoord(c Coord, i i32) -> Coord {
    c.x = c.x + i
    c.y = c.y + i
    c.z = c.z + i

    ret c
}

fn scale(v Vec2, scaler i32) -> Vec2 {
    v.x = v.x * scaler
    v.y = v.y * scaler

    ret v
}

fn printVec2(v Vec2) {
    printStr("x: ") printInt(v.x) printStr("\n")
    printStr("y: ") printInt(v.y) printStr("\n")
}

fn test2Structs(c1 Coord, c2 Coord) {
    printCoord(c1)
    printStr("-----\n")

    c1.x = c1.x + c2.x
    c1.y = c1.y + c2.y
    c1.z = c1.z + c2.z

    printCoord(c1)
}

fn printBigStruct(b BigStruct) {
    printInt(b.a1) printStr(", ")
    printInt(b.a2) printStr(", ")
    printInt(b.a3) printStr(", ")
    printInt(b.a4) printStr(", ")
    printInt(b.a5) printStr("\n")
}

fn addBigStruct(b BigStruct, i i32) -> BigStruct {
    printBigStruct(b)
    printStr("+ ") printInt(i) printStr(" (all)\n")

    b.a1 = b.a1 + i
    b.a2 = b.a2 + i
    b.a3 = b.a3 + i
    b.a4 = b.a4 + i
    b.a5 = b.a5 + i

    ret b
}

fn use2BigStruct(b1 BigStruct, i i32, b2 BigStruct) -> BigStruct {
    printBigStruct(b1)
    printStr("- ")
    printBigStruct(b2)
    printStr("+ ") printInt(i) printStr(" (all)\n")

    b1.a1 = b1.a1 - b2.a1 + i
    b1.a2 = b1.a2 - b2.a2 + i
    b1.a3 = b1.a3 - b2.a3 + i
    b1.a4 = b1.a4 - b2.a4 + i
    b1.a5 = b1.a5 - b2.a5 + i

    ret b1
}

fn retStructLit() -> BigStruct {
    ret BigStruct{ a1: 69, a2: 64, a3: 69, a4: 420, a5: -64 }
}

fn testRet() {
    printStr("--- 8Byte struct\n")
    v := Vec2{ x: 2, y: 4 }
    printVec2(v)
    printVec2(scale(v, 4))

    v2 := scale(v, 2)
    printVec2(v2)

    printStr("--- aligned 12Byte struct\n")
    printCoord(c1)
    c2 := offsetCoord(c1, 2)
    printCoord(c2)

    printStr("--- aligned 20Byte struct\n")
    b := addBigStruct(BigStruct{ a1: 1, a2: 2, a3: 3, a4: 4, a5: 5 }, 68)
    printInt(b.a1) printStr(", ")
    printInt(b.a2) printStr(", ")
    printInt(b.a3) printStr(", ")
    printInt(b.a4) printStr(", ")
    printInt(b.a5) printStr("\n")
    printBigStruct(b)

    printStr("--- 2x aligned 20Byte struct args\n")
    b2 := BigStruct{ a1: 1, a2: 2, a3: 3, a4: 4, a5: 5 }
    b3 := use2BigStruct(b, 1, b2)
    printBigStruct(b3)
}

fn testOmitedNames() {
    c := Coord{ 1, 2, 3 }
    printCoord(c)

    printStr("-----\n")

    t := Test2{ -64, Test{ 64, "test string", -69 }, true }
    printStr("i: ")    printInt(t.i)
    printStr("\ni1: ") printInt(t.t.i1)
    printStr("\ns1: ") printStr(t.t.s1)
    printStr("\ni2: ") printInt(t.t.i2)
    printStr("\nb: ") printBool(t.b) printChar('\n')
}

fn main() {
    printStr("global ---------\n")
    test_global()

    printStr("\nlocal ---------\n")
    test_local()

    printStr("\nnested struct ---------\n")
    testNested()

    printStr("\nomited fieldNames -----\n")
    testOmitedNames()

    printStr("\nassignField ---------\n")
    assignField()

    printStr("\nassign ---------\n")
    assign()

    printStr("\nconst ---------\n")
    const()

    printStr("\npass as arg ---------\n")
    printStr("c1:\n")
    printCoord(c1)

    printStr("struct literal:\n")
    printCoord(Coord{ y: 420, x: 64, z: -64 })

    printStr("2 structs\n")
    c2 := Coord{ y: 2, x: 1, z: 3 }
    test2Structs(c1, c2)

    printStr("big structs\n")
    b := BigStruct{ a1: 1, a2: 2, a3: 3, a4: 4, a5: 5 }
    printBigStruct(b)
    printBigStruct(BigStruct{ a1: 10, a2: 20, a3: 30, a4: 40, a5: 50 })

    printStr("\nreturn struct -----\n")
    testRet()
}
