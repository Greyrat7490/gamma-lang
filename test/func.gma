v1 i32 := 86
v2 str := "some string\n"

fn test1(a1 i32) {
    print(itos(a1))
    print("\n")
    print(itos(v1))
    print("\n")
    print(itos(a1))
    print("\n")
}

fn test2(a1 str) {
    print(a1)
    print(v2)
    print(a1)
}

fn test3() {
    print("40 + 46 = ")
    print(itos(40 + 46))
    print(" (expected: 86)\n")

    print("2 - (3 + 3) = ")
    print(itos(2 - (3 + 3)))
    print(" (expected: -4)\n")

    print("2 - (3 + 3) + -2 * (-1 + 3) = ")
    print(itos(2 - (3 + 3) + -2 * (-1 + 3)))
    print(" (expected: -8)\n")

    print("2 + 3 * (1 + 2 * 3) = ")
    print(itos(2 + 3 * (1 + 2 * 3)))
    print(" (expected: 23)\n")
}

fn test4(a1 i32, a2 i32) {
    print("arg1: ")
    print(itos(a1))
    print("\n")

    print("arg2: ")
    print(itos(a2))
    print("\n")
}

fn test5(a1 str, a2 i32) {
    print("arg1: ")
    print(a1)

    print("arg2: ")
    print(itos(a2))
    print("\n")
}

fn test6(a1 str, a2 str, a3 str, a4 str) {
    print("arg1: ")
    print(a1)

    print("arg2: ")
    print(a2)

    print("arg3: ")
    print(a3)

    print("arg4: ")
    print(a4)
}

fn add(a1 i32, a2 i32) -> i32 {
    ret a1 + a2
}

fn abs_(a1 i32) -> i32 {
    if a1 >= 0 {
        ret a1
    }

    ret -a1
}

fn printAbs(a1 i32) {
    if a1 >= 0 {
        print(itos(a1))
        ret
    }

    print(itos(-a1))
}

fn testRetStr(a1 i32) -> str {
    ret $ a1 == {
        420: "a1 == 420\n"
        69: "a1 == 69\n"
        64: "a1 == 64\n"
        _: "a1 is something else\n"
    }
}

fn test7args(a1 i32, a2 i32, a3 i32, a4 i32, a5 i32, a6 i32, a7 i32) {
    print(itos(a1)) print(" + ")
    print(itos(a2)) print(" + ")
    print(itos(a3)) print(" + ")
    print(itos(a4)) print(" + ")
    print(itos(a5)) print(" + ")
    print(itos(a6)) print(" + ")
    println(itos(a7))
    println(itos(a1 + a2 + a3 + a4 + a5 + a6 + a7))
}

fn test6args(a1 i32, a2 i32, a3 i32, a4 i32, a5 i32, a6 str) {
    print(itos(a1)) print(" + ")
    print(itos(a2)) print(" + ")
    print(itos(a3)) print(" + ")
    print(itos(a4)) print(" + ")
    print(itos(a5)) print(" = ")
    println(itos(a1 + a2 + a3 + a4 + a5))
    println(a6)
}

fn test8args(a1 i32, a2 i32, a3 i32, a4 i32, a5 i32, a6 i32, a7 i32, a8 i32) {
    print(itos(a1)) print(" + ")
    print(itos(a2)) print(" + ")
    print(itos(a3)) print(" + ")
    print(itos(a4)) print(" + ")
    print(itos(a5)) print(" + ")
    print(itos(a6)) print(" + ")
    print(itos(a7)) print(" + ")
    print(itos(a8)) print(" = ")
    println(itos(a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8))
}

fn test7args2(a1 i32, a2 i32, a3 i32, a4 i32, a5 i32, a6 str, a7 i32) {
    print(itos(a1)) print(" + ")
    print(itos(a2)) print(" + ")
    print(itos(a3)) print(" + ")
    print(itos(a4)) print(" + ")
    print(itos(a5)) print(" + ")
    print(itos(a7)) print(" = ")
    println(itos(a1 + a2 + a3 + a4 + a5 + a7))
    println(a6)
}

struct BigStruct {
    i1 i32,
    i2 i32,
    i3 i32,
    i4 i32,
    i5 i32
}

fn test8argsWithStruct(a1 i32, a2 i32, a3 i32, a4 i32, a5 i32, b BigStruct, a6 i32, a7 str) {
    print(itos(a1)) print(" + ")
    print(itos(a2)) print(" + ")
    print(itos(a3)) print(" + ")
    print(itos(a4)) print(" + ")
    print(itos(a5)) print(" + ")
    print(itos(b.i1)) print(" + ")
    print(itos(b.i2)) print(" + ")
    print(itos(b.i3)) print(" + ")
    print(itos(b.i4)) print(" + ")
    print(itos(b.i5)) print(" + ")
    print(itos(a6)) print(" = ")
    println(itos(a1 + a2 + a3 + a4 + a5 + b.i1 + b.i2 + b.i3 + b.i4 + b.i5 + a6))
    println(a7)
}

fn main() {
    test1(420)

    print("------------\n")

    test2("some arg\n")

    print("------------\n")

    test3()

    print("------------\n")

    test4(-69, 86)
    test5("test string arg1\n", 8)
    test6("test string arg1\n", "arg2\n", "string arg3\n", "str4\n")

    print("------------\n")

    print("69 + -69 = ")
    print(itos(add(69, -69)))

    print("\n34 + 30 = ")
    print(itos(add(34, 30)))

    print("\nabs(-69) = ")
    print(itos(abs_(-69)))

    print("\nabs(64) = ")
    print(itos(abs_(64)))

    print("\nprintAbs(64) = ")
    printAbs(64) print("\n")

    print(testRetStr(420))
    print(testRetStr(64))
    print(testRetStr(-69))

    print("\n7 args\n")
    test7args(1, 2, 3, 4, 5, 6, 7)

    print("\n8 args\n")
    test8args(1, 2, 3, 4, 5, 6, 7, 8)

    print("\n6 args (one string)\n")
    test6args(1, 2, 3, 4, 5, "arg 6 (string)")

    print("\n7 args (one string)\n")
    test7args2(1, 2, 3, 4, 5, "arg 6 (string)", 6)

    print("\n8 args with struct\n")
    b := BigStruct{ i1: 1, i2: 2, i3: 3, i4: 4, i5: 5 }
    test8argsWithStruct(1, 2, 3, 4, 5, b, 6, "test string")
}
