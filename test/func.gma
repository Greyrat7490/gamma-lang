v1 i32 := 86
v2 str := "some string\n"

fn test1(a1 i32) {
    printInt(a1)
    printStr("\n")
    printInt(v1)
    printStr("\n")
    printInt(a1)
    printStr("\n")
}

fn test2(a1 str) {
    printStr(a1)
    printStr(v2)
    printStr(a1)
}

fn test3() {
    printStr("40 + 46 = ")
    printInt(40 + 46)
    printStr(" (expected: 86)\n")

    printStr("2 - (3 + 3) = ")
    printInt(2 - (3 + 3))
    printStr(" (expected: -4)\n")

    printStr("2 - (3 + 3) + -2 * (-1 + 3) = ")
    printInt(2 - (3 + 3) + -2 * (-1 + 3))
    printStr(" (expected: -8)\n")

    printStr("2 + 3 * (1 + 2 * 3) = ")
    printInt(2 + 3 * (1 + 2 * 3))
    printStr(" (expected: 23)\n")
}

fn test4(a1 i32, a2 i32) {
    printStr("arg1: ")
    printInt(a1)
    printStr("\n")

    printStr("arg2: ")
    printInt(a2)
    printStr("\n")
}

fn test5(a1 str, a2 i32) {
    printStr("arg1: ")
    printStr(a1)

    printStr("arg2: ")
    printInt(a2)
    printStr("\n")
}

fn test6(a1 str, a2 str, a3 str, a4 str) {
    printStr("arg1: ")
    printStr(a1)

    printStr("arg2: ")
    printStr(a2)

    printStr("arg3: ")
    printStr(a3)

    printStr("arg4: ")
    printStr(a4)
}

fn add(a1 i32, a2 i32) -> i32 {
    ret a1 + a2
}

fn abs_(a1 i32) -> i32 {
    if a1 >= 0 {
        ret a1
    }

    ret -a1
}

fn printAbs(a1 i32) {
    if a1 >= 0 {
        printInt(a1)
        ret
    }

    printInt(-a1)
}

fn testRetStr(a1 i32) -> str {
    ret $ a1 == {
        420: "a1 == 420\n"
        69: "a1 == 69\n"
        64: "a1 == 64\n"
        _: "a1 is something else\n"
    }
}

fn test7args(a1 i32, a2 i32, a3 i32, a4 i32, a5 i32, a6 i32, a7 i32) {
    printInt(a1) printStr(" + ")
    printInt(a2) printStr(" + ")
    printInt(a3) printStr(" + ")
    printInt(a4) printStr(" + ")
    printInt(a5) printStr(" + ")
    printInt(a6) printStr(" + ")
    printInt(a7) printStr("\n")
    printInt(a1 + a2 + a3 + a4 + a5 + a6 + a7) printStr("\n")
}

fn test6args(a1 i32, a2 i32, a3 i32, a4 i32, a5 i32, a6 str) {
    printInt(a1) printStr(" + ")
    printInt(a2) printStr(" + ")
    printInt(a3) printStr(" + ")
    printInt(a4) printStr(" + ")
    printInt(a5) printStr(" = ")
    printInt(a1 + a2 + a3 + a4 + a5) printStr("\n")
    printStr(a6) printStr("\n")
}

fn test8args(a1 i32, a2 i32, a3 i32, a4 i32, a5 i32, a6 i32, a7 i32, a8 i32) {
    printInt(a1) printStr(" + ")
    printInt(a2) printStr(" + ")
    printInt(a3) printStr(" + ")
    printInt(a4) printStr(" + ")
    printInt(a5) printStr(" + ")
    printInt(a6) printStr(" + ")
    printInt(a7) printStr(" + ")
    printInt(a8) printStr(" = ")
    printInt(a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8) printStr("\n")
}

fn test7args2(a1 i32, a2 i32, a3 i32, a4 i32, a5 i32, a6 str, a7 i32) {
    printInt(a1) printStr(" + ")
    printInt(a2) printStr(" + ")
    printInt(a3) printStr(" + ")
    printInt(a4) printStr(" + ")
    printInt(a5) printStr(" + ")
    printInt(a7) printStr(" = ")
    printInt(a1 + a2 + a3 + a4 + a5 + a7) printStr("\n")
    printStr(a6) printStr("\n")
}

struct BigStruct {
    i1 i32,
    i2 i32,
    i3 i32,
    i4 i32,
    i5 i32
}

fn test8argsWithStruct(a1 i32, a2 i32, a3 i32, a4 i32, a5 i32, b BigStruct, a6 i32, a7 str) {
    printInt(a1) printStr(" + ")
    printInt(a2) printStr(" + ")
    printInt(a3) printStr(" + ")
    printInt(a4) printStr(" + ")
    printInt(a5) printStr(" + ")
    printInt(b.i1) printStr(" + ")
    printInt(b.i2) printStr(" + ")
    printInt(b.i3) printStr(" + ")
    printInt(b.i4) printStr(" + ")
    printInt(b.i5) printStr(" + ")
    printInt(a6) printStr(" = ")
    printInt(a1 + a2 + a3 + a4 + a5 + b.i1 + b.i2 + b.i3 + b.i4 + b.i5 + a6) printStr("\n")
    printStr(a7) printStr("\n")
}

fn main() {
    test1(420)

    printStr("------------\n")

    test2("some arg\n")

    printStr("------------\n")

    test3()

    printStr("------------\n")

    test4(-69, 86)
    test5("test string arg1\n", 8)
    test6("test string arg1\n", "arg2\n", "string arg3\n", "str4\n")

    printStr("------------\n")

    printStr("69 + -69 = ")
    printInt(add(69, -69))

    printStr("\n34 + 30 = ")
    printInt(add(34, 30))

    printStr("\nabs(-69) = ")
    printInt(abs_(-69))

    printStr("\nabs(64) = ")
    printInt(abs_(64))

    printStr("\nprintAbs(64) = ")
    printAbs(64) printStr("\n")

    printStr(testRetStr(420))
    printStr(testRetStr(64))
    printStr(testRetStr(-69))

    printStr("\n7 args\n")
    test7args(1, 2, 3, 4, 5, 6, 7)

    printStr("\n8 args\n")
    test8args(1, 2, 3, 4, 5, 6, 7, 8)

    printStr("\n6 args (one string)\n")
    test6args(1, 2, 3, 4, 5, "arg 6 (string)")

    printStr("\n7 args (one string)\n")
    test7args2(1, 2, 3, 4, 5, "arg 6 (string)", 6)

    printStr("\n8 args with struct\n")
    b := BigStruct{ i1: 1, i2: 2, i3: 3, i4: 4, i5: 5 }
    test8argsWithStruct(1, 2, 3, 4, 5, b, 6, "test string")
}
