import "memory.gma"

struct vector {
    ptr *i32,
    cap u64,
    len u64
}

fn new_vec(len u64) -> vector {
    cap := len + 2
    ret vector{ ptr: malloc(cap*4) as *i32, len: len, cap: cap }
}

fn append(v vector, i i32) -> vector {
    if v.len >= v.cap {
        new_cap := v.cap + v.cap/2
        new_ptr := malloc(new_cap * 4) as *i32

        memcpy(new_ptr as u64, v.ptr as u64, v.cap*4)

        v.ptr = new_ptr
        v.cap = new_cap
    }

    *(v.ptr+v.len*4) = i
    v.len = v.len+1

    ret v
}

fn get(v vector, idx u64) -> i32 {
    ret *(v.ptr+idx*4)
}

fn set(v vector, idx u64, val i32) {
    *(v.ptr+idx*4) = val
}

fn printVec(v vector) {
    print("vec: { ")
    for i u64, v.len {
        print(itos(get(v, i))) print(" ")
    }
    print("} (len: ") print(utos(v.len)) print(")")
}

fn main() {
    vec := new_vec(1)
    printVec(vec) print(ctos('\n'))

    vec = append(vec, 1)
    vec = append(vec, 2)
    vec = append(vec, 3)
    printVec(vec) print(ctos('\n'))

    for i i32, 100, 4 {
        vec = append(vec, i)
    }
    printVec(vec) print(ctos('\n'))
}
