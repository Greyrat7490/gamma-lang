import "std.gma"

MSG_SIZE        :: 1024
PORT            :: 6969
MAX_PENDING_CON :: 3

HTTP_RES :: "HTTP/1.1 200 ok\n" + 
        "Server: HTTP Server\n" + 
        "Keep-Alive: timeout=2, max=200\n" + 
        "Connection: Keep-Alive\n" + 
        "Content-type: text/html\n\n" + 
        "<h1>Hello from HTTP Server written in gamma</h1>\n"


fn main() {
    println(fmt("run on http://localhost:{}", PORT))
    
    // create ipv4/tcp socket --------------------------------------------------------
    fd := socket(AF_INET, SOCK_STREAM, 0)
    if fd == -1 {
        println("error: could not create socket file descriptor")
        exit(1)
    }
    println(fmt("created socket file descriptor: {}", fd))


    // test getsockopt ---------------------------------------------------------------
    opt := 0
    optlen := sizeof::<i32>() as i32
    err := getsockopt(fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, &optlen)
    if err != 0 {
        println(fmt("{} getsockopt error", err))
        exit(1)
    }
    println(fmt("reuseable port/addr: {}", opt))


    // make addr and port reusable ---------------------------------------------------
    opt = 1
    err = setsockopt(fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, optlen)
    if err != 0 {
        println(fmt("{} setsockopt error", err))
        exit(1)
    }
    println("set port/addr as reuseable")


    // prepare socket for connections ------------------------------------------------
    addr := sockaddr_in{ sin_family: AF_INET as u16, sin_port: htons(PORT), sin_addr: INADDR_ANY, sin_zero: 0 }

    err = bind(fd, &addr, sizeof::<sockaddr_in>() as u32)
    if err != 0 {
        println(fmt("{} bind error", err))
        exit(1)
    }

    err = listen(fd, MAX_PENDING_CON)
    if err != 0 {
        println(fmt("{} listen error", err))
        exit(1)
    }

    sockaddr_in_size := sizeof::<sockaddr_in>() as u32
    client_fd := accept(fd, &addr, &sockaddr_in_size)
    if client_fd == -1 {
        println(fmt("{} accept error", client_fd))
        exit(1)
    }


    // send and recv http ------------------------------------------------------------
    buffer := [MSG_SIZE]char {}
    readSize := read(client_fd, buffer as *char, MSG_SIZE)

    print(ctos('\n'))
    for i i64, readSize {
        print(ctos(buffer[i]))
    }
    print(ctos('\n'))

    bytes := send(client_fd, HTTP_RES, 0)
    if bytes == -1 {
        println(fmt("{} send error", bytes))
        exit(1)
    }


    // shutdown and close sockets ----------------------------------------------------
    err = close(client_fd)
    if err != 0 {
        println(fmt("{} close client_fd error", err))
        exit(1)
    }

    err = shutdown(fd, SHUT_RDWR)
    if err != 0 {
        println(fmt("{} socket shutdown error", err))
        exit(1)
    }
}
