fn from_pchar(size u32, cstr *char) -> str {
    ret *(&cstr as u64 as *str)
}

fn str_at(s str, idx u32) -> char {
    ret *(s as *char + (idx as u64))
}

fn substr(s str, from u32, to u32) -> str {
    ret from_pchar(to - from, s as *char + (from as u64))
}


/* dec string to u64
 * valid is set to false if string contains a non-digit char
*/
fn parse_uint(s str, valid *bool) -> u64 {
    res u64 := 0
    for i u32, s.len {
        digit := str_at(s, i) as u8 - ('0' as u8) 
        if digit as u16 > 9 {
            *valid = false
            ret 0
        }
        res = res * 10 + (digit as u64)
    }
    ret res
}

/* dec string to i64
 * valid is set to false if string contains a non-digit char
*/
fn parse_int(s str, valid *bool) -> i64 {
    startIdx := $ str_at(s, 0) == { '-': 1; _: 0 }

    res u64 := 0
    for i u32, s.len, startIdx {
        digit := str_at(s, i) as u8 - ('0' as u8)
        if digit as u16 > 9 {
            *valid = false
            ret 0
        }
        res = res * 10 + (digit as u64)
    }

    if startIdx == 1 {
        ret -res as i64
    }
    ret res as i64
}

/* hex string to u64
 * valid is set to false if string contains a non-digit char
 * hex string starts with 0x
 * a-f and A-F are allowed
*/
fn parse_hex(s str, valid *bool) -> u64 {
    if str_at(s, 0) != '0' || str_at(s, 1) != 'x' {
        *valid = false
        ret 0
    }

    res u64 := 0
    for i u32, s.len, 2 {
        digit := str_at(s, i) as u8
        if digit <= {
        ('0' as u8)-1:
            *valid = false
            ret 0

        // 0-9
        ('9' as u8): 
            digit = digit - ('0' as u8)

        // A-F
        ('F' as u8):
            if digit < ('A' as u8) {
                *valid = false
                ret 0
            } 
            
            digit = digit - ('A' as u8) + 10

        // a-f
        ('f' as u8):
            if digit < ('a' as u8) {
                *valid = false
                ret 0
            } 
            
            digit = digit - ('a' as u8) + 10

        _:
            *valid = false
            ret 0
        }

        res = res * 16 + (digit as u64)
    }
    ret res
}

/* oct string to u64
 * valid is set to false if string contains a non-digit char
 * oct string starts with leading 0
*/
fn parse_oct(s str, valid *bool) -> u64 {
    if str_at(s, 0) != '0' {
        *valid = false
        ret 0
    }

    res u64 := 0
    for i u32, s.len, 1 {
        digit := str_at(s, i) as u8 - ('0' as u8)
        if digit > 7 {
            *valid = false
            ret 0
        }
        res = res * 8 + (digit as u64)
    }
    ret res
}
