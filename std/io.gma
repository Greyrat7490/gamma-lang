import "syscall.gma"
import "memory.gma"
import "string.gma"

// std stream file descriptors
STDIN  :: 0
STDOUT :: 1
STDERR :: 2

// file access flags
O_RDONLY    :: 0
O_WRONLY    :: 1
O_RDWR      :: 2

// open flags
O_CREAT     :: 0100                     // create file if not existing
O_TRUNC     :: 01000                    // clear file on open
O_APPEND    :: 02000                    // open in append mode
O_PATH      :: 010000000                // open dir or file
O_DIRECTORY :: 0200000                  // open a dir (error if not a dir)
O_EXCL      :: 0200                     // create file (error if existing)
O_NOCTTY    :: 0400                     // if terminal it will not become process controlling terminal
O_NONBLOCK  :: 04000                    // open in non-blocking mode if possible
O_NDELAY    :: O_NONBLOCK
O_SYNC      :: 04010000                 // writes will complete according to the requirements of synched IO file integrity completion
O_ASYNC     :: 020000                   // enable signal-driven IO
O_NOATIME   :: 01000000                 // do not modify last access time of file
O_TMPFILE   :: 020000000 | O_DIRECTORY  // created unnamed tmp file


AT_FDCWD :: -100

PATH_MAX :: 0x1000


fn read(fd i32, buf *char, size u64) -> i64 {
    ret _syscall(SYS_READ)
}

fn write(fd i32, s str) -> i64 {
    ret _syscall(SYS_WRITE)
}

/*
* if O_CREAT is not set ignore permission
* permission: 0<owner><group><other>
  * 1 -> exec, 2 -> write, 4 -> read
  * actual resulting permission is (mode & ~umask)
*/
fn openfile(file *char, flags i32, permission u32) -> i32 {
    ret _syscall(SYS_OPEN) as i32
}

fn open(file *char, flags i32) -> i32 {
    ret openfile(file, flags, 0)
}

fn openat(dirfd i32, file *char, oflags i32) -> i32 {
    ret _syscall(SYS_OPENAT) as i32
}

fn create(file *char) -> i32 {
    // read/write for all users (if umask allows)
    ret openfile(file, O_TRUNC | O_RDWR | O_CREAT, 0666)
}

fn close(fd i32) -> i32 {
    ret _syscall(SYS_CLOSE) as i32
}

fn getcwd(buf *char, size u64) -> bool {
    ret _syscall(SYS_GETCWD) != 0
}


READER_BUF_SIZE u64 :: 4 * 1024

struct Reader {
    fd i32,
    pos u64,
    buffer [$]char,
    isEOF bool
}

fn create_reader(path str) -> Reader {
    fd := open(path as *char, O_RDONLY)
    if fd == -1 {
        print("[ERROR] could not open: ") print(path) print(ctos('\n'))
        exit(1)
    }

    ret Reader{ fd, 0, [$]char{ READER_BUF_SIZE }, false }
}

fn close_reader(reader *Reader) -> i32 {
    // TODO free buffer
    ret close(reader.fd)
}

fn read_file(reader *Reader) -> str {
    // TODO use fstat to get size of file

    while true {
        sz := reader.buffer.cap - reader.buffer.len
        if sz as i64 <= 0 {
            old_ptr := reader.buffer as *char
            old_cap := reader.buffer.cap

            reader.buffer = [$]char{ cap: old_cap + old_cap/2, len: reader.buffer.len }
            memcpy(reader.buffer as *char as u64, old_ptr as u64, old_cap)

            // TODO free old_ptr
            sz = reader.buffer.cap - reader.buffer.len
        }

        pos := read(reader.fd, (reader.buffer as *char)+reader.buffer.len, sz)
        if pos == {
            -1: {
                print("[ERROR] could not read file\n")
                exit(1)
            }
            0: break
            _: reader.buffer.len = reader.buffer.len + (pos as u64)
        }
    }

    reader.pos = reader.buffer.len
    reader.isEOF = true
    ret from_cstr(reader.buffer as *char)
}

fn read_line(reader *Reader) -> str {
    cstr := reader.buffer as *char + reader.pos

    // find line break
    for i u64, reader.buffer.len, reader.pos {
        c := reader.buffer[i]
            if c == {
            '\r': {
                size := i - reader.pos
                if i+1 < reader.buffer.cap && (reader.buffer[i+1] == '\n') {
                    i = i + 1
                }
                reader.pos = i + 1
                ret from_pchar(size as u32, cstr)
            }
            '\n': {
                size := i - reader.pos
                reader.pos = i + 1
                ret from_pchar(size as u32, cstr)
            }
        }
    }

    // extend buffer until line break found
    while true {
        // resize buffer if needed
        sz := reader.buffer.cap - reader.buffer.len
        if sz as i64 <= 0 {
            old_ptr := reader.buffer as *char
            old_cap := reader.buffer.cap

            reader.buffer = [$]char{ cap: old_cap + old_cap/2, len: reader.buffer.len }
            memcpy(reader.buffer as *char as u64, old_ptr as u64, old_cap)

            // TODO free old_ptr
            sz = reader.buffer.cap - reader.buffer.len
        }

        // read from file
        old_len := reader.buffer.len
        pos := read(reader.fd, (reader.buffer as *char)+reader.buffer.len, sz)
        if pos == {
            -1: {
                print("[ERROR] could not read file\n")
                exit(1)
            }
            0: {
                reader.isEOF = true
                ret ""
            }
            _: reader.buffer.len = reader.buffer.len + (pos as u64)
        }

        // find line break
        for i u64, reader.buffer.len, old_len {
            c := reader.buffer[i]
            if c == {
                '\r': {
                    size := i - reader.pos
                    if i+1 < reader.buffer.cap && (reader.buffer[i+1] == '\n') {
                        i = i + 1
                    }
                    reader.pos = i + 1
                    ret from_pchar(size as u32, cstr)
                }
                '\n': {
                    size := i - reader.pos
                    reader.pos = i + 1
                    ret from_pchar(size as u32, cstr)
                }
            }
        }
    }

    ret from_pchar(reader.buffer.len as u32, cstr)
}
